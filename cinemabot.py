import json
from dotenv import load_dotenv
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('MAIN_BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MAIN_BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
FIND_ID = range(1)

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
JSON_FILE = 'movies.json'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è lock-—Ñ–∞–π–ª–∞
LOCK_FILE = 'cinemabot.lock'

if os.path.exists(LOCK_FILE):
    print("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª cinemabot.lock, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    exit()

with open(LOCK_FILE, 'w') as f:
    f.write(str(os.getpid()))

def cleanup_lock_file():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

import atexit
atexit.register(cleanup_lock_file)  # –£–¥–∞–ª—è–µ–º lock-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open(JSON_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            if "movies" not in data:
                data["movies"] = []
            return data
    except FileNotFoundError:
        logger.info("–§–∞–π–ª movies.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ...")
        return {"movies": []}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return {"movies": []}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ ID
def get_movie_by_id(movies, movie_id):
    return next((movie for movie in movies if movie['id'] == movie_id), None)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def generate_main_menu():
    keyboard = [
        ["üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º"],
        ["<< –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ö–∏–Ω–æ–ë–æ—Ç*! üé•\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –∏—Ö ID.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        parse_mode="Markdown",
        reply_markup=generate_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_command(update: Update, context: CallbackContext):
    command = update.message.text

    if command == "üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º":
        await find_movie_start(update, context)
    elif command == "<< –ù–∞–∑–∞–¥":
        await show_main_menu(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=generate_main_menu())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=generate_main_menu()
    )

# –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
async def find_movie_start(update: Update, context: CallbackContext):
    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardMarkup([["<< –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return FIND_ID

async def find_movie(update: Update, context: CallbackContext):
    movie_id = update.message.text.strip()
    if movie_id.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_main_menu(update, context)
        return ConversationHandler.END

    data = load_data()
    movies = data.setdefault("movies", [])  # –ó–∞—â–∏—Ç–∞ –æ—Ç KeyError
    movie = get_movie_by_id(movies, movie_id)

    if not movie:
        await update.message.reply_text(
            f"‚ùå –§–∏–ª—å–º —Å ID {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=generate_main_menu()
        )
        return ConversationHandler.END

    response = (
        f"üé• *–ù–∞–∑–≤–∞–Ω–∏–µ*: {movie['title']}\n"
        f"üóìÔ∏è *–ì–æ–¥*: {movie['year']}\n"
        f"üë®‚Äçüé§ *–†–µ–∂–∏—Å—Å–µ—Ä*: {movie['director']}\n"
        f"üé≠ *–ñ–∞–Ω—Ä*: {', '.join(movie['genre'])}\n"
        f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º]({movie.get('watch_url', '')})\n"
    )

    if movie.get("photo_url"):
        try:
            await update.message.reply_photo(
                photo=movie["photo_url"],
                caption=response,
                parse_mode="Markdown",
                reply_markup=generate_main_menu()
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n{response}",
                parse_mode="Markdown",
                reply_markup=generate_main_menu()
            )
    else:
        await update.message.reply_text(
            response,
            parse_mode="Markdown",
            reply_markup=generate_main_menu()
        )

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text(" OPERATION CANCELLED.", reply_markup=generate_main_menu())
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def process_update(update_data):
    application = Application.builder().token(BOT_TOKEN).build()
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    await application.bot.delete_webhook()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    WEBHOOK_URL = f"https://YOUR_RAILWAY_APP_URL/cinemabot"
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.start()
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv('PORT', 8080)),  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
        url_path="cinemabot",
        webhook_url=WEBHOOK_URL
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º$"), find_movie_start)],
        states={
            FIND_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, find_movie)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("<< –ù–∞–∑–∞–¥"), show_main_menu)
        ]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)



    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_webhook(
        listen="0.0.0.0",
        port=8080,
        url_path="cinemabot",
        webhook_url=f"https://YOUR_RAILWAY_APP_URL/cinemabot"
    )
    

 # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def process_update(update_data):
    application = Application.builder().token(BOT_TOKEN).build()
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)