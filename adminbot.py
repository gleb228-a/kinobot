import json
from datetime import datetime
from dotenv import load_dotenv
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

if not BOT_TOKEN or not ADMIN_ID:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ADMIN_BOT_TOKEN –∏–ª–∏ ADMIN_ID")

try:
    ADMIN_ID = int(ADMIN_ID)
except ValueError:
    raise ValueError("ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
(
    ADD_TITLE, ADD_YEAR, ADD_DIRECTOR, ADD_GENRE, ADD_PHOTO, ADD_URL, 
    DELETE_ID, ADD_ADMIN_ID, GENERATE_CODE
) = range(9)

# –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
JSON_FILE = 'movies.json'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è lock-—Ñ–∞–π–ª–∞
LOCK_FILE = 'adminbot.lock'

if os.path.exists(LOCK_FILE):
    print("–ê–¥–º–∏–Ω-–±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª adminbot.lock, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    exit()

with open(LOCK_FILE, 'w') as f:
    f.write(str(os.getpid()))

def cleanup_lock_file():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

import atexit
atexit.register(cleanup_lock_file)  # –£–¥–∞–ª—è–µ–º lock-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open(JSON_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            if "movies" not in data:
                data["movies"] = []
            if "admins" not in data:
                data["admins"] = [ADMIN_ID]
            return data
    except FileNotFoundError:
        logger.info("–§–∞–π–ª movies.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ...")
        return {"movies": [], "admins": [ADMIN_ID]}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        return {"movies": [], "admins": [ADMIN_ID]}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_data(data):
    with open(JSON_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    data = load_data()
    return user_id in data.setdefault("admins", [])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def generate_admin_menu():
    keyboard = [
        ["üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º"],
        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º"],
        ["üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ["<< –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–±–æ—Ç!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=generate_admin_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_admin_command(update: Update, context: CallbackContext):
    command = update.message.text

    if command == "üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã":
        await admin_view_movies(update, context)
    elif command == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º":
        await admin_add_movie_start(update, context)
    elif command == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º":
        await admin_delete_movie_start(update, context)
    elif command == "üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        await add_admin_start(update, context)
    elif command == "<< –ù–∞–∑–∞–¥":
        await show_admin_menu(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=generate_admin_menu())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def show_admin_menu(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üîí –ê–¥–º–∏–Ω-–º–µ–Ω—é:\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=generate_admin_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã —Ñ–∏–ª—å–º–æ–≤
async def admin_view_movies(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    data = load_data()
    movies = data.setdefault("movies", [])

    if not movies:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=generate_admin_menu())
        return

    response = "üìö –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n"
    for movie in movies:
        response += (
            f"ID: {movie['id']} | –ö–æ–¥: {movie.get('code', '–ù–µ—Ç –∫–æ–¥–∞')} | –ù–∞–∑–≤–∞–Ω–∏–µ: {movie['title']} | –ì–æ–¥: {movie['year']} | "
            f"–†–µ–∂–∏—Å—Å–µ—Ä: {movie['director']} | –ñ–∞–Ω—Ä: {', '.join(movie['genre'])}\n"
        )

    await update.message.reply_text(response, reply_markup=generate_admin_menu())

# –ö–æ–º–∞–Ω–¥–∞: –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
async def admin_add_movie_start(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    await update.message.reply_text("üé• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", reply_markup=ReplyKeyboardMarkup([["<< –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return ADD_TITLE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
async def admin_add_title(update: Update, context: CallbackContext):
    title = update.message.text.strip()
    if title.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    context.user_data['title'] = title
    await update.message.reply_text("üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞:")
    return ADD_YEAR

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞
async def admin_add_year(update: Update, context: CallbackContext):
    try:
        year = int(update.message.text.strip())
        if year < 1800 or year > datetime.now().year:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ –æ—Ç 1800 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞).")
        return ADD_YEAR

    context.user_data['year'] = year
    await update.message.reply_text("üë®‚Äçüé§ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ —Ñ–∏–ª—å–º–∞:")
    return ADD_DIRECTOR

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ —Ñ–∏–ª—å–º–∞
async def admin_add_director(update: Update, context: CallbackContext):
    director = update.message.text.strip()
    if director.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    context.user_data['director'] = director
    await update.message.reply_text("üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return ADD_GENRE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
async def admin_add_genre(update: Update, context: CallbackContext):
    genres = [genre.strip() for genre in update.message.text.split(',')]
    if update.message.text.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    context.user_data['genre'] = genres
    await update.message.reply_text("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ñ–∏–ª—å–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=ReplyKeyboardMarkup([["<< –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True))
    return ADD_PHOTO

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ñ–∏–ª—å–º–∞
async def admin_add_photo(update: Update, context: CallbackContext):
    if update.message.photo:
        photo_url = update.message.photo[-1].file_id
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
            file_info = await context.bot.get_file(photo_url)
            context.user_data['photo_url'] = photo_url
            await update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.")
            return ADD_PHOTO
    elif update.message.text == "<< –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['photo_url'] = ""
        await update.message.reply_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞:")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ << –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        return ADD_PHOTO

    return ADD_URL

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞
async def admin_add_url(update: Update, context: CallbackContext):
    watch_url = update.message.text.strip()
    if watch_url.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    context.user_data['watch_url'] = watch_url

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Ñ–∏–ª—å–º–∞
    unique_code = generate_movie_code()
    context.user_data['code'] = unique_code

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID
    data = load_data()
    movies = data.setdefault("movies", [])
    new_id = str(len(movies) + 1).zfill(3)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
    new_movie = {
        "id": new_id,
        "code": unique_code,
        "title": context.user_data['title'],
        "year": context.user_data['year'],
        "director": context.user_data['director'],
        "genre": context.user_data['genre'],
        "photo_url": context.user_data.get('photo_url', ""),
        "watch_url": context.user_data['watch_url'],
        "added_date": datetime.now().strftime('%Y-%m-%d'),
        "ratings": [],
        "reviews": []
    }
    movies.append(new_movie)
    save_data(data)

    await update.message.reply_text(
        f"üéâ –§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üé¨ *ID*: {new_id}\n"
        f"üéûÔ∏è *–ö–æ–¥*: `{unique_code}`\n"
        f"üé• *–ù–∞–∑–≤–∞–Ω–∏–µ*: {new_movie['title']}\n"
        f"üóìÔ∏è *–ì–æ–¥*: {new_movie['year']}\n"
        f"üë®‚Äçüé§ *–†–µ–∂–∏—Å—Å–µ—Ä*: {new_movie['director']}\n"
        f"üé≠ *–ñ–∞–Ω—Ä*: {', '.join(new_movie['genre'])}\n"
        f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º]({new_movie.get('watch_url', '')})",
        parse_mode="Markdown",
        reply_markup=generate_admin_menu()
    )
    return ConversationHandler.END

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Ñ–∏–ª—å–º–∞
def generate_movie_code():
    import random
    import string
    code_length = 6
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=code_length))

# –ö–æ–º–∞–Ω–¥–∞: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
async def admin_delete_movie_start(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    await update.message.reply_text("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup([["<< –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return DELETE_ID

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
async def admin_confirm_delete(update: Update, context: CallbackContext):
    movie_id = update.message.text.strip()
    if movie_id.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    data = load_data()
    movies = data.setdefault("movies", [])
    movie = next((m for m in movies if m['id'] == movie_id), None)

    if not movie:
        await update.message.reply_text(f"‚ùå –§–∏–ª—å–º —Å ID {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=generate_admin_menu())
        return ConversationHandler.END

    movies = [m for m in movies if m['id'] != movie_id]
    save_data(data)

    await update.message.reply_text(f"‚úÖ –§–∏–ª—å–º —Å ID {movie_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=generate_admin_menu())
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def add_admin_start(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardMarkup([["<< –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return ADD_ADMIN_ID

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def confirm_add_admin(update: Update, context: CallbackContext):
    admin_id = update.message.text.strip()
    if admin_id.lower() == "<< –Ω–∞–∑–∞–¥":
        await show_admin_menu(update, context)
        return ConversationHandler.END

    try:
        admin_id = int(admin_id)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).", reply_markup=generate_admin_menu())
        return ADD_ADMIN_ID

    data = load_data()
    admins = data.setdefault("admins", [])
    if admin_id in admins:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=generate_admin_menu())
        return ConversationHandler.END

    admins.append(admin_id)
    data["admins"] = admins
    save_data(data)

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=generate_admin_menu())
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text(" OPERATION CANCELLED.", reply_markup=generate_admin_menu())
    return ConversationHandler.END
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def process_update(update_data):
    application = Application.builder().token(BOT_TOKEN).build()
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    await application.bot.delete_webhook()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    WEBHOOK_URL = f"https://YOUR_RAILWAY_APP_URL/adminbot"
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    logger.info("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.start()
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv('PORT', 8080)),  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
        url_path="adminbot",
        webhook_url=WEBHOOK_URL
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã$"), admin_view_movies),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º$"), admin_add_movie_start),
            MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º$"), admin_delete_movie_start),
            MessageHandler(filters.Regex("^üë• –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞$"), add_admin_start)
        ],
        states={
            ADD_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_title)],
            ADD_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_year)],
            ADD_DIRECTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_director)],
            ADD_GENRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_genre)],
            ADD_PHOTO: [MessageHandler(filters.PHOTO | filters.TEXT, admin_add_photo)],
            ADD_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_url)],
            DELETE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_confirm_delete)],
            ADD_ADMIN_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_add_admin)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("<< –ù–∞–∑–∞–¥"), show_admin_menu)
        ]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    logger.info("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_webhook(
        listen="0.0.0.0",
        port=8080,
        url_path="adminbot",
        webhook_url=f"https://YOUR_RAILWAY_APP_URL/adminbot"
    )

  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def process_update(update_data):
    application = Application.builder().token(BOT_TOKEN).build()
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)